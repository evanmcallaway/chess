<canvas id='board' width='730' height='730'></canvas>

<script type='text/javascript'>
var scale = 80;
var canvas = document.getElementById('board');
canvas.addEventListener("mousedown", onClick, false);
var ctx = canvas.getContext('2d');

function King(color, file, rank) {
  this.color = color;
  this.file = file;
  this.rank = rank;
}
King.prototype.getUnicodeCharacter = function() {
  return 9812+6*this.color;
};

function Queen(color, file, rank) {
  this.color = color;
  this.file = file;
  this.rank = rank;
}
Queen.prototype.getUnicodeCharacter = function() {
  return 9813+6*this.color;
};

function Rook(color, file, rank) {
  this.color = color;
  this.file = file;
  this.rank = rank;
}
Rook.prototype.getUnicodeCharacter = function() {
  return 9814+6*this.color;
};

function Bishop(color, file, rank) {
  this.color = color;
  this.file = file;
  this.rank = rank;
}
Bishop.prototype.getUnicodeCharacter = function() {
  return 9815+6*this.color;
};

function Knight(color, file, rank) {
  this.color = color;
  this.file = file;
  this.rank = rank;
}
Knight.prototype.getUnicodeCharacter = function() {
  return 9816+6*this.color;
};

function Pawn(color, file, rank) {
  this.color = color;
  this.file = file;
  this.rank = rank;
}
Pawn.prototype.getUnicodeCharacter = function() {
  return 9817+6*this.color;
};

function getCharacterPosition(file, rank) {
  file = file.toLowerCase().charCodeAt(0)-97
  return [file*(scale+1)+(scale*1.15), (scale*8-scale*.125)-(rank-1)*(scale+1)]
}

function getSquarePosition(file, rank) {
  return [file*(scale+1), ((scale+1)*8)-rank*(scale+1)]  
}

function onClick(event) {
  var x = event.clientX-document.documentElement.scrollLeft-canvas.offsetLeft;
  var y = event.clientY-document.documentElement.scrollTop-canvas.offsetTop;
  
  if(x < (scale+1) || y > (scale+1)*8){
    return;
  }
  clickOnBoard(Math.floor((x-(scale+1))/(scale+1))+1, Math.floor(9-y/(scale+1)));
}

function clickOnBoard(file, rank) {
  var position = getSquarePosition(file, rank);
  ctx.strokeStyle = '#ffff00';
  ctx.lineWidth = 3;
  
  ctx.beginPath();
  ctx.moveTo(position[0]+3, position[1]+3);
  ctx.lineTo(position[0]+scale-1, position[1]+3);
  ctx.lineTo(position[0]+scale-1, position[1]+scale-1);
  ctx.lineTo(position[0]+3, position[1]+scale-1);
  ctx.lineTo(position[0]+3, position[1]+3);
  ctx.stroke();
}

ctx.fillStyle = '#99ddff';
for(var i = 1; i <= 8; i += 2) {
  for(var j = 0; j < 8; j += 2) {
    ctx.fillRect((i+1)*(scale+1), j*(scale+1), scale, scale);
    ctx.fillRect(i*(scale+1), (j+1)*(scale+1), scale, scale);
  }
}

ctx.fillStyle = '#fcfcfc';
for(var i = 1; i <= 8; i += 2) {
  for(var j = 0; j < 8; j += 2) {
    ctx.fillRect(i*(scale+1), j*(scale+1), scale, scale);
    ctx.fillRect((i+1)*(scale+1), (j+1)*(scale+1), scale, scale);
  }
}

ctx.strokeStyle = '#000000';
for(var i = 1; i <= 9; i++) {
  ctx.beginPath();
  ctx.moveTo(i*(scale+1), 0);
  ctx.lineTo(i*(scale+1), 8*(scale+1));
  ctx.stroke();
  
  ctx.beginPath();
  ctx.moveTo((scale+1), (i-1)*(scale+1));
  ctx.lineTo(9*(scale+1), (i-1)*(scale+1));
  ctx.stroke();
}

ctx.fillStyle = '#000000';
ctx.font = scale*0.75+"px sans-serif";

var whitePieces = new Array();
whitePieces[0] = new King(0, 'e', 1);
whitePieces[1] = new Queen(0, 'd', 1);
whitePieces[2] = new Rook(0, 'a', 1);
whitePieces[3] = new Rook(0, 'h', 1);
whitePieces[4] = new Bishop(0, 'c', 1);
whitePieces[5] = new Bishop(0, 'f', 1);
whitePieces[6] = new Knight(0, 'b', 1);
whitePieces[7] = new Knight(0, 'g', 1);
for(var i = 1; i <= 8; i++) {
  whitePieces[i+7] = new Pawn(0, String.fromCharCode(i+96), 2);
}
for(var i = 0; i < whitePieces.length; i++) {
  ctx.fillText(
    String.fromCharCode(whitePieces[i].getUnicodeCharacter()),
    getCharacterPosition(whitePieces[i].file, whitePieces[i].rank)[0],
    getCharacterPosition(whitePieces[i].file, whitePieces[i].rank)[1]
  );
}

var blackPieces = new Array();
blackPieces[0] = new King(1, 'e', 8);
blackPieces[1] = new Queen(1, 'd', 8);
blackPieces[2] = new Rook(1, 'a', 8);
blackPieces[3] = new Rook(1, 'h', 8);
blackPieces[4] = new Bishop(1, 'c', 8);
blackPieces[5] = new Bishop(1, 'f', 8);
blackPieces[6] = new Knight(1, 'b', 8);
blackPieces[7] = new Knight(1, 'g', 8);
for(var i = 1; i <= 8; i++) {
  blackPieces[i+7] = new Pawn(1, String.fromCharCode(i+96), 7);
}
for(var i = 0; i < blackPieces.length; i++) {
  ctx.fillText(
    String.fromCharCode(blackPieces[i].getUnicodeCharacter()),
    getCharacterPosition(blackPieces[i].file, blackPieces[i].rank)[0],
    getCharacterPosition(blackPieces[i].file, blackPieces[i].rank)[1]
  );
}
</script>